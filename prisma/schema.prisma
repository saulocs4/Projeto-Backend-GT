// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  firstname String
  surname String
  email String @unique
  password String
  created_at DateTime @default(now())
  update_at DateTime @updatedAt
}
    
//Ana 

model Category {
  id  Int @id @default(autoincrement()) 
  name String
  slug String
  use_in_menu Boolean @default(false) 
  quantity Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

//Jairo

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  // campo opcional (allowNull: true)
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  active      Boolean  @default(true)

  @@map("products")
}

//Janiny

//Esta tabela poderá ter um relacionamento com a tabela de produtos, pq um produto pode ter várias imagens

model ProductImage {
  id          Int      @id @default(autoincrement())
  productId   Int      
  enabled     Boolean? @default(false) 
  path        String   // Caminho relativo da imagem. Obrigatório.

  // Relacionamento com Product com a tabela protudos
  product     Product  @relation(fields: [productId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Adicionar esta linha na tabela de Procutos um produto pode ter muitas imagens
  images            ProductImage[] 

//Jonathas

model Product {
  id Int @id
  itens ProductOptions[]
}

model ProductOptions {
  id Int @id @default(autoincrement())
  product_id Int // vem tabela produto
  title String
  shape Role @default(square)
  radius Int @default(0) 
  type  OptionType @default(TEXT) 
  values String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

enum Role {
 square
 circle
}

enum OptionType {
  TEXT
  COLOR
}

//Saulo

model Produto {
  id          Int                @id @default(autoincrement())
  nome        String
  categorias  ProdutoCategoria[]
}

model Categoria {
  id          Int                @id @default(autoincrement())
  nome        String
  produtos    ProdutoCategoria[]
}

model ProdutoCategoria {
  product_id  Int
  category_id Int

  produto     Produto   @relation(fields: [product_id], references: [id])
  categoria   Categoria @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
}
